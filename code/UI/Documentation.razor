@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="title_space"> </div>

	<div class="docs">
		<h1>How to code in BF</h1>


		<h2>What is BF?</h2>
		<p>BF is an esoteric programming language that at a glance is impossible to read, but in practice is very easy to understand.</p>
		<p>The actual name of the language is Brainfuck, but we will refer to it as BF in this guide.</p>
		<div class="section_split"></div>
	

		<h2>How does BF work?</h2>
		<p>Imagine a spreadsheet with only one row and infinite columns</p>
		<p>Also imagine that in every cell of this row, there is a 0</p>
		<div class="elab">Like so: {0} {0} {0} {0} {0} ...</div>

		<p>This is a good way to imagine your memory when working with BF. This data structure is just a list of bytes (or unsigned chars).</p>
		<div class="elab">Each cell has a number value that can be 0 to 255</div>

		<p>Along with your memory, you also have a memory pointer (header)</p>
		<div class="elab">When a BF script first starts, the header is pointing at the very first memory cell.</div>
		<div class="elab">
		</div>
		<div class="elab">Like so:</div>
		<div class="elab">{0} {0} {0} {0} {0} ...</div>
		<div class="elab_attachment"> ^</div>

		<p>With these concepts in mind, BF in a general sense lets you do four things</p>
		<div class="elab">1. Increment or decrement the value of the cell that the header is pointing at (add or subtract 1)</div>
		<div class="elab">2. Move the header left or right</div>
		<div class="elab">3. Perform Input and Output based on the values of these cells</div>
		<div class="elab">4. Create loops to do the first three things efficiently</div>
		<div class="section_split"></div>

		<h2>The tokens of BF</h2>
		<p>BF has a total of eight tokens that will be defined here</p>

		<p>Token One: +</p>
		<div class="elab">The + token increments the value of the cell that the header is pointing at once

If you want to set a cell to a large value, the interpreter will need to read + several times

Add One
	Before: {0}
	Code: +
	After: {1}

Add Eight
	Before: {0}
	Code: +++++ +++
	After: {8}

Because a cell can only contain the values 0-255, if you perform + on a {255} cell, it will overflow to {0} again

Cell Overflow
	Before: {255}
	Code: +
	After: {0}

Cell Overflow mid execution
	Before: {250}
	Code: +++++ +++
	After: {3}
		</div>

		<p>Token Two: -</p>
		<div class="elab">The - token is the opposite of the + token. It decrements the value of the header cell once

Subtract One
	Before: {1}
	Code: -
	After: {0}

Subtract Eight
	Before: {13}
	Code: ----- ---
	After: {5}

If you decrement a cell with the value {0}, the value will underflow to 255

Cell underflow
	Before: {0}
	Code: -
	After: {255}

Cell underflow mid execution
	Before: {5}
	Code: ----- ---
	After: {253}
		</div>

		<p>Token Three: &gt;</p>
		<div class="elab">The &gt; token moves the memory header to the right once. The &gt; symbol looks like an arrow pointing right

When a BF script first starts, there is only one memory cell, but if you move out of bounds going right, the memory size will expand.

Incrementing two different cells seperately
	Before: {0}
	Code: +++++ &gt; +++
	After: {5} {3}

Creating range from one to five
	Before: {0}
	Code: + &gt; ++ &gt; +++ &gt; ++++ &gt; +++++
	After: {1} {2} {3} {4} {5}
		</div>

		<p>Token Four: &lt;</p>
		<div class="elab">The &lt; token is the opposite of the &gt; token. The &lt; token moves your memory header left.

Set first cell to three, then subtract one later
	Before: {0}
	Code: +++ &gt; ++++ &lt; -
	After: {2} {4}

Set first and last cell to one, then set middle cell to one
	Before: {0}
	Code: + &gt;&gt;&gt;&gt; + &lt;&lt; +
	After: {1} {0} {1} {0} {1}

If you attempt to move the header out of bounds using &lt;, the header will wrap around to the last cell that was automatically generated

All cells set to one, then decrement first cell, then wrap left side to decrement last cell
	Before: {0}
	Code: + &gt; + &gt; + &lt;&lt; - &lt; -
	After: {0} {1} {0}
		</div>

		<p>Token Five: .</p>
		<div class="elab">The . token does the following...
	Reads the value of the current cell

	Converts it to a character using the ascii standard

	Prints that character to the standard output

For example, the decimal number for the ! symbol in ascii is 33
If we set the value of a cell to 33, then print it, it is the same as print('!')

print('!')
	Before: {0}
	Code: +++++ +++++ +++++ +++++ +++++ +++++ +++ .
	After: {33}
	StdOut: !

This sounds aweful, but there are much better ways of printing words that will be discussed later
		</div>

		<p>Token Six: ,</p>
		<div class="elab">Following the theme of the other token groups, the , token sort of does the opposite of the . token

The , token pauses execution of the BF script and waits for the user to press a button.
	When the user presses a button, that button is converted to a byte value using the ascii standard

	That value is then stored in the cell that the header is pointing at

Get one char from user
	Before: {0}
	Code: ,
	Action: User presses h
	After: {104}

Delayed typing to terminal
	Before: {0}
	Code: , . &gt; , . &gt; , . &gt; , . &gt; , .
	Action: User presses in order h e l l o
	After: {104} {101} {108} {108} {111}
	StdOut: hello
		</div>

		<p>Tokens Seven and Eight: [ ]</p>
		<div class="elab">These tokens [ and ] go hand in hand. They define a loop in your program

Any code that is [ inside square brackets ] is executed repeatedly
	Execution stops when the header is pointing at a cell with [0] value at the end of the loop

So essentially, the [] tokens are equivalent to this psuedo code:

while (memory[header] != 0) {
	Execute Code
}


Decrement cell until it is 0 (memory[header] = 0)
	Before: {57}
	Code: [-]
	After: {0}


Print a "string"
	Before: {104} {101} {108} {108} {111}
	Code: [.&gt;]
	After: {104} {101} {108} {108} {111} {0}
	StdOut: hello


Calculate 3 * 5
	Before: {0}
	Code: +++ [&gt; +++++ &lt; -]
	After: {0} {15}


Notice how a loop necessarily zeros out one cell during its operation. This can present design challenges that we will discuss further later on.
		</div>

		<p>Now that we've defined all eight tokens, let's look at some design concepts in BF</p>
		<div class="section_split"></div>


		<h2>Design Concepts</h2>
		<p>Coding in BF can be like solving a puzzle. You won't make anything useful, but the journey of making things substantial is a fun excercise.</p>

		<p>Copying Numbers</p>
		<div class="elab">Because loops in BF set the control cells value to 0, there are many procedures that require you to copy cells
Doing so is very easy, just increment a "copy cell" by one at the end of every iteration of your loop
Then move the value of the copy cell back to its original place

Before: {0}
Code: {
	# Set the value of cells 1 and 2 to the value of cell 0 {5}; which sets cell 0 to {0}
	+++++ [
		&gt; +
		&gt; +
		&lt;&lt; -
	]

			# Move the value of cell 2 back to cell 0
	&gt;&gt; [
		&lt;&lt; +
		&gt;&gt; -
	]
}
After: {5} {5} {0}
		</div>

		<p>Sentinal Values</p>
		<div class="elab">Let's make a program that takes the number (n) and writes 1 n times to memory
How do we get to the end of the memory? How do we return to the beginning?

Because loops execute code until the loop stops on a {0} cell, the placement of {0} cells can be used to control the programs flow.

Let's see what that example program looks like.

Before: {0}
Code: {
	# Set the second cell to 5
	# The first cell is used as a sentinal to return to memory cell 0
	&gt; +++++ [
		# Move to the next cell that equals 0, then add 1
		[&gt;] +

		# Move back to our first cell which is still 0
		[&lt;]

		# Move to the second cell and decrement 1 to control the loop
		&gt; -
	]
}
After: {0} {0} {1} {1} {1} {1} {1}
		</div>

		<p>Getting to a number quickly</p>
		<div class="elab">If you want to set the value of a cell to the letter 'z' {122}, it's not sensible to write + 122 times
Instead, you can get to 122 by multiplying two numbers, then adding/subtracting the rest of the way

The square root of 122 is ~11.045361
11 * 11 = 121, that's close. So we start there

Before: {0}
Code: {
	# Every time we decrement cell 0 by 1, we add 11 to cell 1
	+++++ +++++ + [
		&gt; +++++ +++++ +
		&lt; -
	]

	# After that loop, we move to cell 1 and add 1 to reach 122
	&gt; +
}
After: {0} {122}

This uses ~50 bytes of tokens (including formatting) instead of 122. Much better
		</div>

		<p>Rendering Strings</p>
		<div class="elab">Think of a string as a block of bytes that ends with a memory cell with the value of {0} (like in C)

Strings containing multiple letters can be rendered using the same procedure explained in "Getting to a number quickly"
	Except done in parallel

Let's say we want to define the string "hello"

The char with the highest value is 'o' {111}
square root of 111 ~= 10.5356538
Now let's take the ascii value of each char, divide it by 10, then round down. If the remainder is &gt;= 5, add 1

char  ascii  //10  Remainder  multiplier
 h     104    10       4          10
 e     101    10       1          10
 l     108    10       8          11
 l     108    10       8          11
 o     111    11       1          11

Now, let's add the multiplier to their respective cells 10 times, then adjust the cells using + or - to finalize the render

Before: {0}
Code: {
	# str = "ddnnn"
	+++++ +++++ [
		&gt; +++++ +++++
		&gt; +++++ +++++
		&gt; +++++ +++++ +
		&gt; +++++ +++++ +
		&gt; +++++ +++++ +
		&lt;&lt;&lt;&lt;&lt; -
	]

	&gt; ++++  # str = "hdnnn"
	&gt; +     # str = "hennn"
	&gt; --    # str = "helnn"
	&gt; --    # str = "helln"
	&gt; +     # str = "hello"
	[&lt;]
	&gt; [.&gt;] # print(str)
}
After: {0} {104} {101} {108} {108} {111} {0}
StdOut: hello
		</div>

		<p>Printing Sentences</p>
		<div class="elab">Printing a string in BF is easy when the string is already rendered
But even with technique, rendering sentences is still too much work

Because we print one char at a time, and a char doesn't need to stay in memory after it's printed, we can manipulate a smaller string and print as we go.

One way to do this is to render a string where each byte has a job rather than a specific value

Imagine splitting the lowercase alphabet into 5 sections, then consider the following structure
{puntuation} {capital_letter} {1/5_alphabet} {2/5_alphabet} {3/5_alphabet} {4/5_alphabet} {5/5_alphabet}

Each alphabet byte is in charge of flexing between 5 different letters (except the last cell, it manages 6)

Let's create this arrangement in code and print some longer text

Before: {0}
Code: {
	# str = "(Pddnnx"
	+++++ +++++ [
		&gt; ++++
		&gt; +++++ +++
		&gt; +++++ +++++
		&gt; +++++ +++++
		&gt; +++++ +++++ +
		&gt; +++++ +++++ +
		&gt; +++++ +++++ ++
		&lt;&lt;&lt;&lt;&lt;&lt;&lt; -
	]

	&gt;&gt; --       # str = "(Nddnnx"
	&gt; -         # str = "(Ncdnnx"
	&gt; ++++      # str = "(Nchnnx"
	&gt; -         # str = "(Nchmnx"
	&gt; ++++      # str = "(Nchmrx"
	&gt; -         # str = "(Nchmrw"

	# Begin printing text by flexing char groups to the chars needed just in time
	&lt;&lt;&lt;&lt;&lt; ----- - .
	&gt; ++ .
	&gt;&gt; - ..
	+++ .
	&lt;&lt;&lt;&lt; ----- --- .
	&gt; +++++ +++++ + .
	&lt; +++++ + .
	&gt;&gt; --- .
	&gt;&gt; .
	&gt;&gt; + .
	&lt;&lt;&lt;&lt;&lt;&lt; ----- . - .
	&gt; ----- ----- - .
	&gt; - .
	&gt;&gt;&gt; -- ..
	&gt; + .
	&lt;&lt;&lt;&lt;&lt;&lt; .
	&gt;&gt; ++ .
	&gt;&gt; .
	&lt;&lt; + .
	&gt; + .
	&gt; - .
	&lt; -- .
}
After: {0} {32} {72} {100} {103} {110} {112} {121}
StdOut: Hello S&box! Happy coding

You can also render all alpha numeric symbols and travel between them, but travel costs get expensive when you have to literally go from 'A' to 'z'
		</div>
	</div>
</root>

@code
{
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( "" );
}
